1. Retrieve all documents from the "customers" collection.
-> db.customers.find();

2. Find all customers from the "customers" collection who are from the city "Sal".
-> db.customers.find({City:"Sal"})

3. Find all films from the "films" collection with a rating of "PG-13".
-> db.films.find({Rating:"PG-13"})

4. Find the first 10 customers from the "customers" collection, sorted by their last name in ascending order.
-> db.customers.find({},{"Last Name":1}).sort({"Last Name":1, _id:0}).limit(10)

5. Find all films from the "films" collection with a length greater than 120 minutes.

	// before trying plz convert length into integer cause length is in string.

	var cursor = db.films.find({ Length: { $type: "string" } });

	cursor.forEach(function(doc)
	{
		if (!isNaN(doc.Length))
		{
			var numericValue = parseInt(doc.Length);
			db.films.updateOne({ _id: doc._id }, { $set: { Length: numericValue }});
		}
		else
		{
			print("Field cannot be converted to a number: " + doc._id);
		}
	});

-> sakila> db.films.find({Length:{$gt:120}},{Title:1,Length:1,_id:0})

6. Find all customers from the "customers" collection who have rented a film with amount is greater than $11.
->	db.customers.aggregate
	([
  		{
    			$unwind: "$Rentals"
  		},
  		{
    			$match: {"Rentals.Payments.Amount": { $gt: 11 }}
  		},
  		{
    			$project: {_id: 1,Address: 1,City: 1,Country: 1,"Rentals.Payments.Amount": 1}
  		}
	])

db.customers.aggregate([{$unwind: "$Rentals"}])


7. Find the total number of films in the "films" collection.
-> db.films.find().count()

8. Find all films from the "films" collection where the description contains the word "china" and the rating is "R".
-> db.films.find({$and : [ {Description : {$regex : /china/i}} , {Rating : "R"}]})

9. Find the top 5 customers who have rented the most films from the "customers" collection.
->	db.customers.aggregate
	([
  		{
    			$project: {_id: 1,numRentals: { $size: "$Rentals" }}
  		},
  		{
    			$sort: { numRentals: -1 }
  		},
  		{
  			$limit: 5
  		}	
	])


10. Find all customers from the "customers" collection who have rented films with a rental duration of less than 50 days.

	var cursor = db.films.find({ "Rental Duration": { $type: "string" } });
	cursor.forEach(function(doc)
	{
		if (!isNaN(doc.Length))
		{
			var numericValue = parseInt(doc.Length);
			db.films.updateOne({ _id: doc._id }, { $set: { "Rental Duration": numericValue }});
		}
		else
		{
			print("Field cannot be converted to a number: " + doc._id);
		}
	});

->  db.films.find({"Rental Duration":{$lt:50}})

11. Find all films from the "films" collection where category is "Comedy" and the "PG" rating.
-> db.films.find({$and:[{Category:"Comedy"},{Rating:"PG"}]})

12. Find all films from the "films" collection where at least one actor has the first name "Tom" or "John".
-> db.films.find({Actors:{$elemMatch:{"First name":{$in:["TOM","JOHN"]}}}})

13. Find all customers from the "customers" collection who have not rented any films.
-> db.customers.find({ Rentals: { $exists: true, $eq:[ ] } })

14. Find all films from the "films" collection where the special feature "Deleted Scenes" is included.
-> db.films.find({"Special Features": {$regex:/Deleted Scenes/i}})

15. Find all films from the "films" collection where rental duration is exactly 50 days and a rating is "G".
-> db.films.find({$and:[{"Rental Duration":{$eq:50}},{Rating:"G"}]})

16. Find all films from the "films" collection where the description matches a pattern that starts with "A Action" and ends with "house".
-> db.films.find({ Description: { $regex: /^A Action.*house$/i } })

17. Insert a new document into the "customers" collection with the following information: Name: "John Doe", Address: "123 Main St", City: "New York", Phone: "555-1234".
-> db.customers.insertOne({Name: "John Doe", Address: "123 Main St", City: "New York", Phone: "555-1234"})

18. Increment the Amount of the customer with the "Film Title": "BEDAZZLED MARRIED", by 10.
-> db.customers.updateMany({"Rentals.Film Title":"BEDAZZLED MARRIED"},{$inc:{"Rentals.$[rental].Payments.$[payment].Amount":10}},{arrayFilters:[{"rental.Film Title":"BEDAZZLED MARRIED"},{"payment.Payment Id":{$exists:true}}]})

19. Remove the "City" field from all documents in the "customers" collection where the address contains the word "Street"
-> db.customers.updateOne({Address:{$regex:/Street/i}},{$unset:{City:1}})

20. Create a compound index on the "last_name" and "first_name" fields in the "customers" collection.
-> db.customers.createIndex({"First Name":1,"Last Name":1})

21. Delete all documents from the "films" collection with a rating of "NC-17".
-> db.films.deleteOne({Rating: "NC-17"})

22. Add a new field called "release_year" to all documents in the "films" collection, setting its value to the current year
-> db.films.updateMany({},{$set:{release_year: new Date().getFullYear()}})

23. Find all documents in the "customers" collection where the phone number starts with "558".
-> db.customers.find({Phone: {$regex: /^558\d*/}})

24. Rename the field "Description" to "Plot" in all documents in the "films" collection.
-> db.films.updateMany({},{$rename:{"Description":"Plot"}})

25. Find all documents in the "films" collection where the "actors" array contains at least one actor with the last name "DEPP".
-> db.films.find({Actors:{$elemMatch:{"Last name":"DEPP"}}},{"Actors.Last name":1})
-> db.films.aggregate([ {$match:{ "Actors.Last name":"DEPP"}},{$project:{"Actors.Last name":1}}])

26. Create a text index on the "Plot" field in the "films" collection with a weight of 2.
-> db.films.createIndex({Plot:"text"},{weights:{Plot:2}})

27. Find the average length of films in the "films" collection, rounded to the nearest whole number.
->  db.films.aggregate([{$group:{_id:null,Avg_Length:{$avg:"$Length"}}},{$project:{_id: 0,Average_Length:{$round:["$Avg_Length"]}}}])

28. Sort all documents in the "customers" collection by the number of rentals in descending order.
->  db.customers.aggregate([ {$project:{Rental_count:{$size:"$Rentals"}}},{$sort:{Rental_count:-1}}])

29. Find the total number of unique actors across all documents in the "films" collection.
->  db.films.aggregate([{$unwind:"$Actors"},{$group:{_id:"$Actors.actorId"}},{$count:"Count of Unique Actors"}])
->  db.films.aggregate([{$unwind:"$Actors"},{$group:{_id:"$Actors.actorId",count:{$sum:1}}}])
->  db.films.aggregate([{$unwind:"$Actors"},{$group:{_id:"$Actors.actorId"}},{$group:{_id:null,count:{$sum:1}}}])

30. Limit the results of a find operation on the "customers" collection to 10 documents, skipping the first 5 documents.
->  db.customers.find().skip(5).limit(10)

31. Find all documents in the "films" collection where the "Category" are "Action" and "Comedy".
->  db.films.find({Category:{$in:["Action","Comedy"]}})

32. Update all documents in the "customers" collection, adding the field "loyalty_points" with an initial value of 0.
->  db.customers.updateMany({},{$set:{loyalty_points:0}})

33. Find the top 5 customers who have the highest total rental payments in the "customers" collection.
->  db.customers.aggregate([{$unwind:"$Rentals"},{$unwind:"$Rentals.Payments"},{$group:{_id:"$_id",totalRentalPayments:{$sum:"$Rentals.Payments.Amount"}}},{$sort:{totalRentalPayments:-1}},{$limit:5}])

34. Aggregate the total rental payments for each customer in the "customers" collection, sorting the results in descending order by total payment amount.
->  db.customers.aggregate([{$unwind:"$Rentals"},{$unwind:"$Rentals.Payments"},{$group:{_id:"$_id",totalRentalPayments:{$sum:"$Rentals.Payments.Amount"}}},{$sort:{totalRentalPayments:-1}},{$project:{totalRentalPayments:{$round:["$totalRentalPayments"]}}}])

35. Find all films from the "films" collection where the length is between 90 and 120 minutes.
->  db.films.find({$and:[{Length:{$gt:90}},{Length:{$lt:120}}]})

36. Update the "Rating" field of the film titled "ACE GOLDFINGER" in the "films" collection to "PG-13".
->  db.films.updateMany({Title:"ACE GOLDFINGER"},{$set:{Rating:"PG-13"}})

37. Remove the "actors" field from all documents in the "films" collection where the _id is 2.
->  db.films.updateMany({_id:2},{$unset:{Actors:1}})

38. Create a unique index on the "Phone" field in the "customers" collection.
->  db.customers.createIndex({Phone:1},{unique:true})

39. Delete all array documents from the "customers.Rentals" collection where the "filmId" is 100.
->  db.customers.updateMany({"Rentals.filmId": 100}, {$pull: {Rentals: {filmId: 100}}})

40. Increment the "loyalty_points" field by 50 for all documents in the "customers" collection where the "Rentals" field size is greater than 10.
->  db.customers.updateMany({$expr:{$gt:[{$size:"$Rentals"},10]}},{$inc:{loyalty_points:50}})

41. Find the average replacement cost of films in the "films" collection with a rating of "R".
->   db.films.aggregate([{$match:{Rating:"R"}},{$group:{_id:null,avgReplacementCost:{$avg:{$toDouble:"$Replacement Cost"}}}},{$project:{_id: 0,avgReplacementCost:{$round:["$avgReplacementCost",2]}}}]);

42. Add an array field called "genres" to the "films" collection and populate it with unique genre names extracted from the "Category" field.
->  
    // Step 1: Aggregate to extract unique genre names from the "Category" field
    
    db.films.aggregate([{$group:{_id:null,genres:{$addToSet:"$Category"}}},{$project:{_id:0,genres:1}}])

    // Step 2: Store the unique genre names obtained from the aggregation result
    // in a variable and then update documents in the "films" collection to add the "genres" field
   
    var uniqueGenres = ['Sci-Fi', 'Sports', 'Drama', 'New', 'Foreign', 'Classics','Games', 'Documentary', 'Music', 'Comedy', 'Children', 'Action','Animation', 'Travel', 'Horror', 'Family'];

    db.films.updateMany({},{$set:{genres:uniqueGenres}});
