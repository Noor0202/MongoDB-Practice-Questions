**Medium Level Questions:**

1. Retrieve all documents from the "customers" collection.
-> db.customers.find();

2. Find all customers from the "customers" collection who are from the city "Sal".
-> db.customers.find({City:"Sal"})

3. Find all films from the "films" collection with a rating of "PG-13".
-> db.films.find({Rating:"PG-13"})

4. Find the first 10 customers from the "customers" collection, sorted by their last name in ascending order.
-> db.customers.find({},{"Last Name":1}).sort({"Last Name":1, _id:0}).limit(10)

5. Find all films from the "films" collection with a length greater than 120 minutes.

	// before trying plz convert length into integer cause length is in string.

	var cursor = db.films.find({ Length: { $type: "string" } });

	cursor.forEach(function(doc)
	{
		if (!isNaN(doc.Length))
		{
			var numericValue = parseInt(doc.Length);
			db.films.updateOne({ _id: doc._id }, { $set: { Length: numericValue }});
		}
		else
		{
			print("Field cannot be converted to a number: " + doc._id);
		}
	});

-> sakila> db.films.find({Length:{$gt:120}},{Title:1,Length:1,_id:0})

6. Find all customers from the "customers" collection who have rented a film with a replacement cost greater than $5.
-> db.customers.find({ "Rentals": { "$elemMatch": { "Payments.Amount": { "$gt": 5 } } } })

7. Find the total number of films in the "films" collection.
-> db.films.find().count()

8. Find all films from the "films" collection where the description contains the word "china" and the rating is "R".
-> db.films.find({$and : [ {Description : {$regex : /china/i}} , {Rating : "R"}]})

9. Find the top 5 customers who have rented the most films from the "customers" collection.
-> db.customers.find().sort({"Rentals":-1}).limit(5)

10. Find all customers from the "customers" collection who have rented films with a rental duration of less than 50 days.

	var cursor = db.films.find({ "Rental Duration": { $type: "string" } });
	cursor.forEach(function(doc)
	{
		if (!isNaN(doc.Length))
		{
			var numericValue = parseInt(doc.Length);
			db.films.updateOne({ _id: doc._id }, { $set: { "Rental Duration": numericValue }});
		}
		else
		{
			print("Field cannot be converted to a number: " + doc._id);
		}
	});

->  db.films.find({"Rental Duration":{$lt:50}})
**Hard Level Questions:**

11. Find the average length of films in the "films" collection.
12. Find all customers from the "customers" collection who have rented films from the "Comedy" category and the "PG" rating.
13. Find all films from the "films" collection where at least one actor has the first name "Tom" or "John".
14. Find the total number of unique cities represented in the "customers" collection.
15. Find the 3rd and 4th oldest films from the "films" collection, sorted by their release year.
16. Find all customers from the "customers" collection who have not rented any films.
17. Find all films from the "films" collection where the special feature "Deleted Scenes" is included.
18. Find all customers from the "customers" collection who have rented films with a rental duration of exactly 7 days and a rating of "G".
19. Find the average replacement cost of films in the "films" collection with a length greater than 90 minutes.
20. Find all films from the "films" collection where the description matches a pattern that starts with "Action" and ends with "thriller".
